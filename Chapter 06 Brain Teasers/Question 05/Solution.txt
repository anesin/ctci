We may observe that, regardless of how we drop Egg 1, Egg 2 must do a linear search (from lowest to highest) between the "breaking floor" and the next highest nonbreaking floor. For example, if Egg 1 is dropped from floors 5 and 10 without breaking, but it breaks when it's dropped from floor 15, then Egg 2 must be dropped, in the worst case, from floors 11, 12, 13, and 14.


The Approach

As a first try, suppose we drop an egg from the 10th floor, then the 20th, ...
• If Egg 1 breaks on the first drop (floor 10), then we have at most 10 drops total.
• If Egg 1 breaks on the last drop (floor 100), then we have at most 19 drops total (floors 10, 20, ..., 90, 100, then 91 through 99).

That's pretty good, but all we've considered is the absolute worst case. We should do some "load balancing" to make those two cases more even.

Our goal is to create a system for dropping Egg 1 such that the number of drops is as consistent as possible, whether Egg 1 breaks on the first drop or the last drop.

1. A perfectly load-balanced system would be one in which Drops(Egg 1) + Drops(Egg 2) is always the same, regardless of where Egg 1 breaks.

2. For that to be the case, since each drop of Egg 1 takes one more step, Egg 2 is allowed one fewer step.

3. We must, therefore, reduce the number of steps potentially required by Egg 2 by one drop each time. For example, if Egg 1 is dropped on floor 20 and then floor 30, Egg 2 is potentially required to take 9 steps. When we drop Egg 1 again, we must reduce potential Egg 2 steps to only 8. That is, we must drop Egg 1 at floor 39.

4. We know, therefore, Egg 1 must start at floor X, then go up by X-l floors, then X-2, ..., until it gets to 100.

5. Solve for X in: X + (X-l) + (X-2) + ... + 1 = 100.
   X (X + 1) / 2 = 100  ->  X = 14.

We go to floor 14, then 27, then 39, .... This takes 14 steps in the worse case.

As in many other maximizing / minimizing problems, the key in this problem is "worst case balancing."